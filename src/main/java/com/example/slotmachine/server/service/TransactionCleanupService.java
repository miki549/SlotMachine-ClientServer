package com.example.slotmachine.server.service;

import com.example.slotmachine.server.entity.GameTransaction;
import com.example.slotmachine.server.entity.User;
import com.example.slotmachine.server.repository.GameTransactionRepository;
import com.example.slotmachine.server.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class TransactionCleanupService {
    
    private static final int MAX_TRANSACTIONS_PER_USER = 1000;
    
    @Autowired
    private GameTransactionRepository transactionRepository;
    
    @Autowired
    private UserRepository userRepository;
    
    /**
     * Minden nap hajnali 2:00-kor futtatja a cleanup job-ot
     * T√∂rli a r√©gi tranzakci√≥kat, hogy minden felhaszn√°l√≥n√°l maximum 1000 tranzakci√≥ maradjon
     */
    @Scheduled(cron = "0 0 2 * * ?") // Minden nap 2:00-kor
    @Transactional
    public void cleanupOldTransactions() {
        System.out.println("üßπ Tranzakcio cleanup inditasa...");
        
        List<User> allUsers = userRepository.findAll();
        int totalDeleted = 0;
        
        for (User user : allUsers) {
            int deletedCount = cleanupTransactionsForUser(user);
            totalDeleted += deletedCount;
            
            if (deletedCount > 0) {
                System.out.println("üë§ " + user.getUsername() + ": " + deletedCount + " regi tranzakcio torolve");
            }
        }
        
        System.out.println("‚úÖ Tranzakcio cleanup befejezve. Osszesen " + totalDeleted + " tranzakcio torolve.");
    }
    
    /**
     * Egy adott felhaszn√°l√≥ tranzakci√≥inak cleanup-ja
     * @param user A felhaszn√°l√≥
     * @return T√∂r√∂lt tranzakci√≥k sz√°ma
     */
    private int cleanupTransactionsForUser(User user) {
        // √ñsszes tranzakci√≥ lek√©r√©se d√°tum szerint cs√∂kken≈ë sorrendben
        List<GameTransaction> allTransactions = transactionRepository.findByUserOrderByCreatedAtDesc(user);
        
        // Ha 1000-n√©l kevesebb van, nem kell t√∂r√∂lni
        if (allTransactions.size() <= MAX_TRANSACTIONS_PER_USER) {
            return 0;
        }
        
        // A legut√≥bbi 1000 tranzakci√≥ megtart√°sa, a t√∂bbi t√∂rl√©se
        List<GameTransaction> transactionsToDelete = allTransactions.subList(MAX_TRANSACTIONS_PER_USER, allTransactions.size());
        
        // Tranzakci√≥k t√∂rl√©se
        transactionRepository.deleteAll(transactionsToDelete);
        
        return transactionsToDelete.size();
    }
    
    /**
     * Manu√°lis cleanup futtat√°sa (admin haszn√°latra)
     * @return T√∂r√∂lt tranzakci√≥k sz√°ma
     */
    @Transactional
    public int manualCleanup() {
        System.out.println("üßπ Manualis tranzakcio cleanup inditasa...");
        
        List<User> allUsers = userRepository.findAll();
        int totalDeleted = 0;
        
        for (User user : allUsers) {
            int deletedCount = cleanupTransactionsForUser(user);
            totalDeleted += deletedCount;
            
            if (deletedCount > 0) {
                System.out.println("üë§ " + user.getUsername() + ": " + deletedCount + " regi tranzakcio torolve");
            }
        }
        
        System.out.println("‚úÖ Manualis tranzakcio cleanup befejezve. Osszesen " + totalDeleted + " tranzakcio torolve.");
        return totalDeleted;
    }
}
